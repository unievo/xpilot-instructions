{
  "openapi": "3.0.0",
  "paths": {
    "/accounts/{address}/transactions": {
      "get": {
        "operationId": "AccountController_getAccountTransactions",
        "summary": "Account transaction list",
        "description": "Returns details of all transactions where the account is sender or receiver",
        "parameters": [
          {
            "name": "address",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "required": false,
            "in": "query",
            "description": "Number of items to skip for the result set",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "size",
            "required": false,
            "in": "query",
            "description": "Number of items to retrieve",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "sender",
            "required": false,
            "in": "query",
            "description": "Address of the transaction sender",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "receiver",
            "required": false,
            "in": "query",
            "description": "Search by multiple receiver addresses, comma-separated",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "token",
            "required": false,
            "in": "query",
            "description": "Identifier of the token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "senderShard",
            "required": false,
            "in": "query",
            "description": "Id of the shard the sender address belongs to",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "receiverShard",
            "required": false,
            "in": "query",
            "description": "Id of the shard the receiver address belongs to",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "miniBlockHash",
            "required": false,
            "in": "query",
            "description": "Filter by miniblock hash",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hashes",
            "required": false,
            "in": "query",
            "description": "Filter by a comma-separated list of transaction hashes",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Status of the transaction (success / pending / invalid / fail)",
            "schema": {
              "enum": [
                "success",
                "pending",
                "invalid",
                "fail"
              ],
              "type": "string"
            }
          },
          {
            "name": "function",
            "required": false,
            "in": "query",
            "description": "Filter transactions by function name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "before",
            "required": false,
            "in": "query",
            "description": "Before timestamp",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "after",
            "required": false,
            "in": "query",
            "description": "After timestamp",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "round",
            "required": false,
            "in": "query",
            "description": "Round number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "order",
            "required": false,
            "in": "query",
            "description": "Sort order (asc/desc)",
            "schema": {
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "List of fields to filter by",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "withScResults",
            "required": false,
            "in": "query",
            "description": "Return scResults for transactions. When \"withScresults\" parameter is applied, complexity estimation is 200",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "withOperations",
            "required": false,
            "in": "query",
            "description": "Return operations for transactions. When \"withOperations\" parameter is applied, complexity estimation is 200",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "withLogs",
            "required": false,
            "in": "query",
            "description": "Return logs for transactions. When \"withLogs\" parameter is applied, complexity estimation is 200",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "withScamInfo",
            "required": false,
            "in": "query",
            "description": "Returns scam information",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "withUsername",
            "required": false,
            "in": "query",
            "description": "Integrates username in assets for all addresses present in the transactions",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "withBlockInfo",
            "required": false,
            "in": "query",
            "description": "Returns sender / receiver block details",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "senderOrReceiver",
            "required": false,
            "in": "query",
            "description": "One address that current address interacted with",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isRelayed",
            "required": false,
            "in": "query",
            "description": "Returns isRelayed transactions details",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isScCall",
            "required": false,
            "in": "query",
            "description": "Returns sc call transactions details",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "withActionTransferValue",
            "required": false,
            "in": "query",
            "description": "Returns value in USD and EGLD for transferred tokens within the action attribute",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "withRelayedScresults",
            "required": false,
            "in": "query",
            "description": "If set to true, will include smart contract results that resemble relayed transactions",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "computeScamInfo",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "accounts"
        ]
      }
    },
    "/accounts/{address}/transactions/count": {
      "get": {
        "operationId": "AccountController_getAccountTransactionsCount",
        "summary": "Account transactions count",
        "description": "Returns total number of transactions for a given address where the account is sender or receiver, as well as total transactions count that have a certain status",
        "parameters": [
          {
            "name": "address",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sender",
            "required": false,
            "in": "query",
            "description": "Address of the transaction sender",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "receiver",
            "required": false,
            "in": "query",
            "description": "Search by multiple receiver addresses, comma-separated",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "token",
            "required": false,
            "in": "query",
            "description": "Identifier of the token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "senderShard",
            "required": false,
            "in": "query",
            "description": "Id of the shard the sender address belongs to",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "receiverShard",
            "required": false,
            "in": "query",
            "description": "Id of the shard the receiver address belongs to",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "miniBlockHash",
            "required": false,
            "in": "query",
            "description": "Filter by miniblock hash",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hashes",
            "required": false,
            "in": "query",
            "description": "Filter by a comma-separated list of transaction hashes",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Status of the transaction (success / pending / invalid / fail)",
            "schema": {
              "enum": [
                "success",
                "pending",
                "invalid",
                "fail"
              ],
              "type": "string"
            }
          },
          {
            "name": "function",
            "required": false,
            "in": "query",
            "description": "Filter transactions by function name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "before",
            "required": false,
            "in": "query",
            "description": "Before timestamp",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "after",
            "required": false,
            "in": "query",
            "description": "After timestamp",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "round",
            "required": false,
            "in": "query",
            "description": "Round number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "senderOrReceiver",
            "required": false,
            "in": "query",
            "description": "One address that current address interacted with",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isRelayed",
            "required": false,
            "in": "query",
            "description": "Returns isRelayed transactions details",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isScCall",
            "required": false,
            "in": "query",
            "description": "Returns sc call transactions details",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "withRelayedScresults",
            "required": false,
            "in": "query",
            "description": "If set to true, will include smart contract results that resemble relayed transactions",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "accounts"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AccountAssets": {
        "type": "object",
        "properties": {}
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "txHash": {
            "type": "string"
          },
          "gasLimit": {
            "type": "number"
          },
          "gasPrice": {
            "type": "number"
          },
          "gasUsed": {
            "type": "number"
          },
          "miniBlockHash": {
            "type": "string"
          },
          "nonce": {
            "type": "number"
          },
          "receiver": {
            "type": "string"
          },
          "receiverUsername": {
            "type": "string",
            "nullable": true
          },
          "receiverAssets": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountAssets"
              }
            ]
          },
          "receiverShard": {
            "type": "number"
          },
          "round": {
            "type": "number"
          },
          "sender": {
            "type": "string"
          },
          "senderUsername": {
            "type": "string",
            "nullable": true
          },
          "senderAssets": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountAssets"
              }
            ]
          },
          "senderShard": {
            "type": "number"
          },
          "signature": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "fee": {
            "type": "string"
          },
          "timestamp": {
            "type": "number"
          },
          "data": {
            "type": "string",
            "nullable": true
          },
          "function": {
            "type": "string",
            "nullable": true
          },
          "action": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionAction"
              }
            ]
          },
          "scamInfo": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ScamInfo"
              }
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "Transaction",
              "SmartContractResult",
              "Reward"
            ],
            "nullable": true
          },
          "originalTxHash": {
            "type": "string",
            "nullable": true
          },
          "pendingResults": {
            "type": "boolean",
            "nullable": true
          },
          "guardianAddress": {
            "type": "string",
            "nullable": true
          },
          "guardianSignature": {
            "type": "string",
            "nullable": true
          },
          "isRelayed": {
            "type": "string",
            "nullable": true
          },
          "relayer": {
            "type": "string",
            "nullable": true
          },
          "relayerSignature": {
            "type": "string",
            "nullable": true
          },
          "isScCall": {
            "type": "boolean",
            "nullable": true
          }
        },
        "required": [
          "txHash",
          "gasLimit",
          "gasPrice",
          "gasUsed",
          "miniBlockHash",
          "nonce",
          "receiver",
          "receiverShard",
          "round",
          "sender",
          "senderShard",
          "signature",
          "status",
          "value",
          "fee",
          "timestamp"
        ]
      },
      "ScamInfo": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "info": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "type",
          "info"
        ]
      },
      "TransactionAction": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "arguments": {
            "type": "object"
          }
        },
        "required": [
          "category",
          "name",
          "description",
          "arguments"
        ]
      }
    }
  }
}